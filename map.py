from utils import randbool
from utils import randcell
from utils import randcell2
from random import randint as rand
import os

# 0 - –ø–æ–ª–µ üü© 1 - –¥–µ—Ä–µ–≤–æ üå≥ 2 - —Ä–µ–∫–∞ üåä 3 - –≥–æ—Å–ø–∏—Ç–∞–ª—å üè• 4 - –∞–ø–≥—Ä–µ–π–¥ üè´ 5 - –æ–≥–æ–Ω—å üî•
#üí≠ üåå üöÅ ü™£ üåü ‚ù§Ô∏è‚Äçüî•

CELL_TYPES = "üü©üå≥üåäüè•üí´üî•"   # –°–ø–∏—Å–æ–∫ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ—è –∫–∞—Ä—Ç—ã
TREE_BONUS = 100            # –ë–æ–Ω—É—Å –æ—á–∫–æ–≤ –∑–∞ —Ç—É—à–µ–Ω–∏–µ –æ–≥–Ω—è
TREE_COST = 50              # –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–≥–æ—Ä–µ–≤—à–µ–≥–æ –¥–µ—Ä–µ–≤–∞, –º–∏–Ω—É—Å –∫ –æ—á–∫–∞–º
UPGRADE_COST = 5000         # –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥–∞ –µ–º–∫–æ—Å—Ç–∏ –≤–æ–¥—ã
LIFE_COST = 1000            # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–µ–π
LIVES_GAIN = 50             # –°–∫–æ–ª—å–∫–æ –∂–∏–∑–Ω–µ–π –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç—Å—è –∑–∞ 1 —Ç–∏–∫, –∫–æ–≥–¥–∞ –º—ã –≤ –≥–æ—Å–ø–∏—Ç–∞–ª–µ
LIVES_MAX = 200             # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–π

class Map(object):
    def __init__(self, w, h):
        self.w = w
        self.h = h
        self.cells = [[0 for i in range(w)] for j in range(h)]
        self.generate_forest(40)
        self.generate_river(100)
        self.generate_upgrade_shop()
        self.generate_hospital()

    def check_bounds(self, x, y):                           # –ú–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫–ª–µ—Ç–∫–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –Ω–∞—à–µ–º—É –ø–æ–ª—é.
        if (x < 0 or y < 0 or x >= self.h or y >= self.w):
            return False
        return True
    
    def print_map(self, helico, clouds):                    # –ü–µ—á–∞—Ç—å –∫–∞—Ä—Ç—ã, –æ–±–ª–∞–∫–æ–≤ –∏ –¥–µ—Ä–µ–≤—å–µ–≤
        print('üü´' * (self.w + 2))
        for ri in range(self.h):
            print('üü´',end='')
            for ci in range(self.w):
                cell = self.cells[ri][ci]
                if (clouds.cells[ri][ci] == 1):
                    print('üí≠',end='')
                elif (clouds.cells[ri][ci] == 2):
                    print('‚ö°',end='')
                    if(self.cells[ri][ci] == 1):                # –ï—Å–ª–∏ –Ω–∞ –º–µ—Å—Ç–µ –º–æ–ª–Ω–∏–∏ —Å—Ç–æ–∏—Ç –¥–µ—Ä–µ–≤–æ, –æ–Ω–æ –∑–∞–≥–æ—Ä–∞–µ—Ç—Å—è (–ø–æ–º–µ—â–∞–µ–º –≤ —è—á–µ–π–∫—É –æ–≥–æ–Ω—å 5)
                        self.cells[ri][ci] = 5
                elif (helico.x == ri and helico.y == ci):
                    print('üöÅ',end='')
                elif (cell >= 0 and cell < len(CELL_TYPES)):
                    print(CELL_TYPES[cell],end='')
            print('üü´')
        print('üü´' * (self.w + 2))

    def generate_river(self, l):                                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫
        while True:
            rc = randcell(self.w, self.h)
            rx, ry = rc[0], rc[1]
            if self.check_bounds(rx, ry):
                self.cells[rx][ry] = 2
                break
        while l > 0:
            while True:
                rc2 = randcell2(rx, ry)
                rx2, ry2 = rc2[0], rc2[1]
                if self.check_bounds(rx2, ry2):
                    self.cells[rx2][ry2] = 2
                    rx, ry = rx2, ry2
                    l -= 1
                    break

    def generate_forest(self, r):                               # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–µ—Å–∞
        for i in range(self.h):
            for j in range(self.w):
                if randbool(r):
                    self.cells[i][j] = 1

    def generate_tree(self):                                    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ä–∞—Å—Ç–∞–Ω–∏—è –¥–µ—Ä–µ–≤—å–µ–≤
        tries = 0
        while tries <= 50:
            tries += 1
            c = randcell(self.w, self.h)
            cx, cy = c[0], c[1]
            if (self.check_bounds(cx, cy) and self.cells[cx][cy] == 0):
                self.cells[cx][cy] = 1
                break

    def generate_upgrade_shop(self):                            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞ —É–ª—É—á—à–µ–Ω–∏–π
        c = randcell(self.w, self.h)
        cx, cy = c[0], c[1]
        self.cells[cx][cy] = 4
    
    def generate_hospital(self):                                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Å–ø–∏—Ç–∞–ª—è
        c = randcell(self.w, self.h)
        cx, cy = c[0], c[1]
        if(self.cells[cx][cy] != 4):
            self.cells[cx][cy] = 3
        else:
            self.generate_hospital()

    def add_fire(self, count = 1, x = -1, y = -1):  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–≥–Ω—è –≤ –∫–ª–µ—Ç–∫—É
        if ((x == -1) and (y == -1)):               # –í –Ω–µ–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∫—É–¥–∞ –¥–æ–±–∞–≤–ª—è—Ç—å –æ–≥–æ–Ω—å. –ï—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, —Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ
            c = randcell(self.w, self.h)
            cx, cy = c[0], c[1]
        else:
            cx, cy = x, y
        if (self.check_bounds(cx, cy) and self.cells[cx][cy] == 1):
            self.cells[cx][cy] = 5
        count -= 1
        if (count > 0):
            self.add_fire(count)

    def update_fires(self, helico, fire_power = 4): # –§—É–Ω–∫—Ü–∏—è –º–µ—Ö–∞–Ω–∏–∫–∏ —Å–≥–æ—Ä–∞–Ω–∏—è –∏ –∑–∞–≥–æ—Ä–∞–Ω–∏—è –¥–µ—Ä–µ–≤—å–µ–≤
        for i in range(self.h):
            for j in range(self.w):
                cell = self.cells[i][j]
                if cell == 5:
                    if (rand(0, 1) == 1):           # –î–µ—Ä–µ–≤–æ —Ç—É—Ö–Ω–µ—Ç –Ω–µ –≤—Å–µ–≥–¥–∞, —à–∞–Ω—Å 50%
                        self.cells[i][j] = 0
                        if (helico.score - TREE_COST >= 0):
                            helico.score -= TREE_COST
                        else:
                            helico.score = 0                           
                    for k in range (fire_power):    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –æ–≥–Ω—è —Ä—è–¥–æ–º. –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–≥–æ–Ω—å —Ä—è–¥–æ–º —Å –≥–æ—Ä—è—â–∏–º –¥–µ—Ä–µ–≤–æ–º, –∞ –Ω–µ —Å–ª—É—á–∞–π–Ω–æ
                        rc2 = randcell2(i, j)
                        rx2, ry2 = rc2[0], rc2[1]
                        if self.check_bounds(rx2, ry2):
                            self.add_fire(1, rx2, ry2)

    def process_helicopter(self, helico, clouds):   # –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≤–µ—Ä—Ç–æ–ª–µ—Ç–∞
        c = self.cells[helico.x][helico.y]
        d = clouds.cells[helico.x][helico.y]
        if (c == 2):
            helico.tank = helico.mxtank
        if ((c == 5) and (helico.tank > 0)):
            helico.tank -= 1
            helico.score += TREE_BONUS
            self.cells[helico.x][helico.y] = 1
        if ((c == 4) and (helico.score > UPGRADE_COST)):
            helico.mxtank += 1
            helico.score -= UPGRADE_COST
        if ((c == 3) and (helico.score > LIFE_COST) and (helico.lives < LIVES_MAX)):
            if (helico.lives + LIVES_GAIN <= LIVES_MAX):
                helico.lives += LIVES_GAIN
            else:
                helico.lives = LIVES_MAX
            helico.score -= LIFE_COST
        if (d == 2):
            helico.lives -= 1
            if(helico.lives == 0):
                os.system("clear")
                print(f"GAME OVER! SCORE: {helico.score}")
                exit(0)

    def export_data(self):                          # –≠–∫—Å–ø–æ—Ä—Ç
        return {"cells": self.cells}
    
    def import_data(self, data):                    # –ò–º–ø–æ—Ä—Ç
        self.cells = data["cells"] or [[0 for i in range(self.w)] for j in range(self.h)]